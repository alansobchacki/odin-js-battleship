(()=>{"use strict";const s=class{constructor(s,t){if(!Number.isInteger(s))throw new Error("Ship size must be an integer");if(s<2||s>5)throw new Error("Invalid ship size");this.size=s,this.health=s,this.initials=t,this.sunk=!1}hit(){this.sunk||(this.health-=1,0==this.health&&this.isSunk())}isSunk(){return this.sunk=!0}},t=class{constructor(){this.board=this.initializeBoard(),this.carrier=new s(5,"ca"),this.battleship=new s(4,"ba"),this.cruiser=new s(3,"cr"),this.submarineOne=new s(3,"s1"),this.submarineTwo=new s(3,"s2"),this.destroyerOne=new s(2,"d1"),this.destroyerTwo=new s(2,"d2"),this.shipsSunk=0,this.ships={ca:this.carrier,ba:this.battleship,cr:this.cruiser,s1:this.submarineOne,s2:this.submarineTwo,d1:this.destroyerOne,d2:this.destroyerTwo}}initializeBoard(){const s=[];for(let t=0;t<10;t++){const t=new Array(10).fill(null);s.push(t)}return s}place(s,t,i=!0){const e=s.size,r=s.initials;let h=t[0],a=t[1];if(i&&a+e>10||!i&&h+e>10)throw new Error("Can't place ship here, index out of bounds");for(let s=0;s<e;s++)if(i){if(null!==this.board[h][a+s])throw new Error("Can't place ship here, there's already a ship here")}else if(null!==this.board[h+s][a])throw new Error("Can't place ship here, there's already a ship here");for(let s=0;s<e;s++)i?this.board[h][a+s]=r:this.board[h+s][a]=r}receiveAttack(s){const t=s[0],i=s[1],e=this.board[t][i];if("hit"==e)throw new Error("Can't attack this square, it was already hit");if(e){if(e&&"hit"!==e){const s=this.ships[e];this.board[t][i]="hit",s.hit(),s.sunk&&(this.shipsSunk+=1)}}else this.board[t][i]="hit"}};!function(s){const t=document.getElementById("game-board");s.forEach(((s,i)=>{s.forEach(((s,e)=>{const r=document.createElement("div");r.classList.add("square"),r.dataset.row=i,r.dataset.column=e,t.appendChild(r)}))}))}((new class{constructor(){this.gameBoard=new t,this.isGameLost=!1}}).gameBoard.board)})();